name: Open-Source AI Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  pull-requests: write

jobs:
  AI-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python and Tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit pipx
          pipx install semgrep
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run Bandit
        run: |
          bandit -r . -f json -o bandit_report.json || true

      - name: Run Semgrep
        run: |
          semgrep --config=auto --json > semgrep_report.json || true

      - name: Merge Issues and Generate Prompt
        run: |
          echo "Security issues found:" > issues_combined.txt
          jq -r '.results[] | select(.issue_severity == "HIGH" or .issue_severity == "MEDIUM") | "* Bandit: " + .issue_text + " in " + .filename + ":" + (.line_number|tostring)' bandit_report.json >> issues_combined.txt
          echo "" >> issues_combined.txt
          jq -r '.results[] | "* Semgrep: " + .extra.message + " in " + .path + ":" + (.start.line|tostring)' semgrep_report.json >> issues_combined.txt
          echo -e "Explain these issues in plain English for developers:\n\n$(cat issues_combined.txt)" > prompt.txt

      - name: Generate AI Explanation with Hugging Face (LLaMA)
        env:
          AI_REVIEWER_TOKEN: ${{ secrets.AI_REVIEWER_TOKEN }}
        run: |
          prompt=$(cat prompt.txt | jq -Rs .)
          response=$(curl -s -X POST \
            -H "Authorization: Bearer $AI_REVIEWER_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"inputs\": $prompt}" \
            https://api-inference.huggingface.co/models/meta-llama/Llama-2-7b-chat-hf)
          echo "$response" > ai_explanation.json
          jq -r 'if .error then "AI explanation could not be generated." else .[0].generated_text end' ai_explanation.json > ai_explanation.txt

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const explanation = fs.readFileSync('ai_explanation.txt', 'utf8');
            const author = context.payload.pull_request.user.login;
            const bandit = JSON.parse(fs.readFileSync('bandit_report.json', 'utf8'));
            const semgrep = JSON.parse(fs.readFileSync('semgrep_report.json', 'utf8'));

            const banditIssues = bandit.results.filter(r => ["HIGH", "MEDIUM"].includes(r.issue_severity));
            const semgrepIssues = semgrep.results || [];

            let summary = `Hi @${author},\n\nBugdar AI Review flagged the following issues:\n\n`;

            if (banditIssues.length) {
              summary += `### Bandit Issues:\n` + banditIssues.map(r =>
                `• **${r.issue_severity}**: ${r.issue_text} in \`${r.filename}:${r.line_number}\``).join('\n') + '\n\n';
            }

            if (semgrepIssues.length) {
              summary += `### Semgrep Issues:\n` + semgrepIssues.map(r =>
                `• ${r.extra.message} in \`${r.path}:${r.start.line}\``).join('\n') + '\n\n';
            }

            summary += `### AI Explanation:\n${explanation}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Block Merge on Critical Findings
        run: |
          high_count=$(jq '[.results[] | select(.issue_severity=="HIGH")] | length' bandit_report.json)
          if [ "$high_count" -gt 0 ]; then
            echo "❌ Merge blocked due to HIGH severity Bandit issues."
            exit 1
          fi


# name: AI AI Review with Bandit

# on:
#   pull_request:
#     types: [opened, synchronize]

# permissions:
#   pull-requests: write

# jobs:
#   AI-review:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install Bandit
#         run: pip install bandit

#       - name: Run Bandit Security Scan
#         run: |
#           bandit -r . -f json -o bandit_report.json || true

#       - name: Check for High/Medium Severity Issues
#         id: check_severity
#         run: |
#           issues=$(jq '[.results[] | select(.issue_severity=="HIGH" or .issue_severity=="MEDIUM")] | length' bandit_report.json)
#           echo "Issue count: $issues"
#           echo "issues=$issues" >> $GITHUB_OUTPUT

#       - name: Comment on PR with Analysis
#         uses: actions/github-script@v6
#         with:
#           script: |
#             const fs = require('fs');
#             const report = JSON.parse(fs.readFileSync('bandit_report.json', 'utf8'));
#             const author = context.payload.pull_request.user.login;
#             const issues = report.results.filter(r => ["HIGH", "MEDIUM"].includes(r.issue_severity));
#             let body = issues.length > 0
#               ? `Hi @${author},\n\nAI AI Review found *${issues.length}* high/medium severity issue(s):\n\n`
#                 + issues.map(r => `• **${r.issue_severity}**: ${r.issue_text} in \`${r.filename}:${r.line_number}\``).join('\n')
#               : `Hi @${author},\n\n✅ AI AI Review found no high or medium severity issues.`;
            
#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: body
#             });
